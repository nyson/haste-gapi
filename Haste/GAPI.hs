{-# LANGUAGE OverloadedStrings #-}

{-|
Module      : Haste.GAPI
Description : Entry Module for haste-gapi
Copyright   : (c) Jonathan SkÃ¥rstedt, 2016
License     : MIT
Maintainer  : jonathan.skarstedt@gmail.com
Stability   : experimental
Portability : Haste

Example of a login to the Google API. Note that @config@ is defined
elsewhere.

@

import Haste.GAPI
import qualified Haste.JSString as J

main :: IO ()
main = withGAPI config $ \\token -> do
  success <- oa2Success token
  if success
    then putStrLn "We're in!"
    else do
      Just e <- errorMsg token
      putStrLn $ "There was an error: " ++ J.unpack e

@

The login starts with the @withGAPI@, which will load the Google API
environment. If the script is compiled with @--onexec@ flag, the load will be
significally faster as we don't have to wait until the script has fully loaded
until we download the Google API hooks.

When loading is done, a @OAuth2Token@ is generated, and we may inspect it
to see wether the login is successful or not. On success, we continue with
showing the token. If not, we print an error instead. Note that the
@withGAPI@ function ought to only be invoked once.


Example of a request:

@

greet :: IO ()
greet = runR $ do
  response <- request "plus\/v1\/people\/me" def
  Just name -> lookupVal response "result.displayName"
  liftIO . putStrLn $ "Hello " ++  name ++ "!"
@

The reqeuest above will greet the user by name, fetched from the Google+ API.
A response is generated by taking a Path and some Params to the @request@
function, which will execute it and return a response.

After that we look up some fields in the result, namely /result.displayName/
and /result.image.url/. The first will be bound to name, and the second to
pic. These two elements are both strings, by Haste.Foreign magic.

After that we use @RequestM@s @liftIO@ (as it's an instance of the MonadIO
class) and present a pretty HTML string!
-}
module Haste.GAPI (
  -- | = Connecting to the Google API
  Config(..),
  withGAPI,
  -- | = Handling OAuth2 Tokens
  module Haste.GAPI.Token,
  -- | = Creating Requests
  module Haste.GAPI.Request,
  -- | = Handling Results
  module Haste.GAPI.Result,
  -- | = Common types when working with Google API libraries
  module Haste.GAPI.Types

  ) where

import Haste (JSString)
import Haste.Foreign hiding (get, has, hasAll)
import qualified Haste.Foreign as FFI

-- GHC 7.8 compatibility
import Data.Functor ((<$>))

import Haste.GAPI.Token
import Haste.GAPI.Request 
import Haste.GAPI.Result
import Haste.GAPI.Types
import Data.Default
import Control.Monad.IO.Class
import Control.Applicative

-- Datatypes -----------------------------------------------------------------

-- | Google API configuration. For an in-detail description of what each field
--    does, please see the <https://developers.google.com/api-client-library/javascript/reference/referencedocs Google API Reference>,
--    especially the methods @gapi.auth.authorize@ and @gapi.client.setApiKey@.
data Config = Config {
  -- | Client ID to generate an authentification token from.
  clientID  :: String,
  -- | The API key for your application
  apiKey    :: String,
  -- | Here you enter the availiable scopes for your application.
  scopes    :: String,
  -- | If true, the token an attempt will be made to refresh it behind the
  --    scenes
  immediate :: Bool
  }

instance Show Config where
  show (Config cid key scopes' imm)
    = "\nConfig: " ++ concatMap (++ "\n\t") [cid, key, scopes', show imm]

instance ToAny Config where
  toAny cfg = toObject [("clientID",  toAny $ clientID cfg),
                        ("apiKey",    toAny $ apiKey cfg),
                        ("scopes",    toAny $ scopes cfg),
                        ("immediate", toAny $ immediate cfg)]

-- | Loads the Google API, inserts Google API headers and then executes
--    an action.
withGAPI :: Config -> (OAuth2Token -> IO ()) -> IO ()
withGAPI cfg handler = do
  loadGAPI cfg handler
  loadGAPIExternals "GAPILoader"

-- | Exports and coordinate loading of the Google API.
loadGAPI :: Config -> (OAuth2Token -> IO ()) -> IO ()
loadGAPI = loadGAPI' "GAPILoader"

-- | Loads the Google API with a custom loader name
loadGAPI' :: String -> Config -> (OAuth2Token -> IO ()) -> IO ()
loadGAPI' symbol cfg handler
  = exportLoaderSymbol symbol $ loadClient cfg $ auth cfg handler

-- | Loads the GAPI Client
loadClient :: Config -> IO () -> IO ()
loadClient = ffi "(function(cfg, auth){\
\gapi.client.setApiKey(cfg.apiKey); \
\window.setTimeout(auth, 1);})"

-- | Authenticates the user. Should be invoked by loadClient
auth :: Config -> (OAuth2Token -> IO ()) -> IO ()
auth = ffi "(function(cfg, ah)\
\{gapi.auth.authorize({\
 \'client_id': cfg.clientID, \
 \'scope': cfg.scopes, \
 \'immediate': cfg.immediate}, \
\ah);})"

-- | Exports the loader symbol
exportLoaderSymbol :: String -> IO () -> IO ()
exportLoaderSymbol = ffi "(function(s, f) {window[s] = f;})"

-- | Loads the external GAPI scripts
loadGAPIExternals :: String -> IO ()
loadGAPIExternals = ffi "(function(sym) {\
\var s = document.createElement('script');\
\s.setAttribute('src', 'https://apis.google.com/js/client.js?onload=' + sym);\
\s.setAttribute('type', 'text/javascript');\
\document.head.appendChild(s);})"
